#!groovy
@Library('jenkins-pipeline-lib') _

pipeline
{
  agent any
  environment
  {
    GIT_CHANGE_LOG = gitChangeLog(currentBuild.changeSets)
  }
  parameters
  {
    string(defaultValue: '1', description: 'Major version number (x.0.0)', name: 'MAJOR_VERSION')
    string(defaultValue: '0', description: 'Minor version number (0.x.0)', name: 'MINOR_VERSION')
  }
  triggers
  {
    //At 04:00 on every day-of-week from Monday through Friday.
    pollSCM('H 4 * * 1-5')
  }
  stages
  {
    stage('Setup')
    {
      steps
      {
        echo 'Running make clean...'
        sh 'make purify'

        gitTagPreBuild "${params.MAJOR_VERSION}.${params.MINOR_VERSION}.${BUILD_NUMBER}"
      }
    }
    stage('Build')
    {
      steps
      {
        sh 'make'
      }
    }
    stage('Cross Compile for ARM')
    {
      steps
      {
        sh 'meson buildresults/arm/ --cross-file build/cross/gcc/arm/nrf52840.txt'
        sh 'ninja -C buildresults/arm'
      }
    }
    stage('ScanWorkspace')
    {
      steps
      {
        warnings categoriesPattern: '', consoleParsers: [[parserName: 'Clang (LLVM based)']], defaultEncoding: '', excludePattern: '**/buildresults/**, **/dependencies/**', failedNewAll: '5', failedTotalAll: '20', healthy: '', includePattern: '', messagesPattern: '', unHealthy: '', unstableNewAll: '1', unstableTotalAll: '15', useStableBuildAsReference: true

        // Scan workspace to check open tasks
        openTasks(defaultEncoding: '', excludePattern: 'buildresults/**, dependencies/**', healthy: '', high: 'FIXME, FIX', ignoreCase: true, low: '', normal: 'TODO', pattern: '**/*.c, **/*.h, **/*.cpp, **/*.hpp, *.lua **/*.sh', unHealthy: '')
      }
    }
  }
  post
  {
    always
    {
      // Report Status
      slackNotify(currentBuild.currentResult)
      gitTagCleanup "${params.MAJOR_VERSION}.${params.MINOR_VERSION}.${BUILD_NUMBER}"
    }
    success
    {
      gitTagSuccess "${params.MAJOR_VERSION}.${params.MINOR_VERSION}.${BUILD_NUMBER}"
    }
    failure
    {
      /*
      * This job does not have a GitHub configuration,
      * so we need to create a dummy config
      */
      githubSetConfig('4c01f168-ca25-483e-bc6d-8d105fc5fb70')
      githubFileIssue()
      emailNotify(currentBuild.currentResult)
    }
  }
}
